import { useState, useEffect, useRef } from 'react'
import { supabaseClient } from '../components/supabaseClient'
import Layout from '../components/Layout.js'
import { useRouter } from 'next/router'
import { PhotoIcon, UserCircleIcon } from '@heroicons/react/24/solid'
import {useUser} from '../components/UserContext.js'

export default function Profile() {
    const {user} = useUser()
    const [profile, setProfile] = useState(null)
    const [selectedImage, setSelectedImage] = useState(null)
    const [chooseImg, setchooseImg] = useState(false)
    const [validData, setValidData] = useState(false)
    const [gravatarUrl, setGravatarUrl] = useState(null)
    const router = useRouter()
    const [formData, setFormData] = useState({
        username : '',
        email : '',
        first_name :'',
        last_name :'',
        about : '',
        country: '',
        city : '',
        state : '',
        postal_code :'',
        phone: ''
    })
    const usernameInput = useRef(formData.username)
    const first_nameInput = useRef(formData.first_name)
    const last_nameInput = useRef(formData.last_name)
    const aboutInput = useRef(formData.about)
    const countryInput = useRef(formData.country)
    const cityInput = useRef(formData.city)
    const stateInput = useRef(formData.state)
    const postal_codeInput = useRef(formData.postal_code)
    const phoneInput = useRef(formData.phone)

    const handleInputChange = (e) => {
        const { name, value } = e.target
        setFormData({
            ...formData,
            [name]: value,
        })  
    }
    
    const handleSubmit = async (e) => {
        e.preventDefault()
        //update
        const {data, error} = await supabaseClient
        .from('profiles')
        .update( {
            username: formData.username ?  formData.username : usernameInput.current.placeholder,
            about: formData.about ?  formData.about : aboutInput.current.placeholder !== 'Write something about you' ? aboutInput.current.placeholder : null,
            first_name: formData.first_name ?  formData.first_name : first_nameInput.current.placeholder !== 'Firstname' ? first_nameInput.current.placeholder : null,
            last_name: formData.last_name ?  formData.last_name : last_nameInput.current.placeholder !== 'Lastname' ? last_nameInput.current.placeholder : null,
            phone: formData.phone ?  formData.phone : phoneInput.current.placeholder !== '06XXXXXXXX' ? phoneInput.current.placeholder : null,
            country: formData.country ? formData.country : countryInput.current.value,
            city: formData.city ?  formData.city : cityInput.current.placeholder !== 'City' ? cityInput.current.placeholder : null,
            department: formData.state ?  formData.state : stateInput.current.placeholder !== 'Department' ? stateInput.current.placeholder : null,
            postal_code: formData.postal_code ?  formData.postal_code : postal_codeInput.current.placeholder !== 'Postal code' ? postal_codeInput.current.placeholder : null,
            email: user?.email,
        }).eq(`id`, user.id)
        if(error){
            console.log(error)
        }
        router.push('/profile')
    }

    //image handle
    const handleImageUpload = async (event) => {
        const file = event.target.files[0]
        console.log(file)
        if(file){
            const reader = new FileReader()
            reader.onloadend = () => {
                setSelectedImage(reader.result)
            }
            setchooseImg(false)
            reader.readAsDataURL(file)
        }
    }
    const handleImageChange = () => {
        if(selectedImage){
            setchooseImg(true)
        }
    }

    useEffect(() => {
        if(user){
            async function fetchData(){
                let { data, error} = await supabaseClient.from('profiles')
                .select('*')
                .eq('id',user.id)
                setProfile(data[0])
            }
            fetchData()
            //Gravatar URL
            const CryptoJS = require("crypto-js")
            const lowercaseEmail = user.email.toLowerCase()
            const md5Hash = CryptoJS.MD5(lowercaseEmail).toString()
            setGravatarUrl(`https://www.gravatar.com/avatar/${md5Hash}?d=mp`)
        }
    },[user])
    
    return (
        <Layout title="Signed Up" description="Generated by create next app">
        <h1 className='wt-title text-darkblue text-center'>
            <span>Profile In</span>formation
        </h1>
        <form onSubmit={handleSubmit}>
            <div className="space-y-12">
                <div className="my-10 border-b border-gray-900/10 pb-12">
                    <h2 className="text-base font-bold leading-7 text-darkblue">Public Information</h2>
                    <p className="mt-1 text-sm leading-6 text-gray-600">This informations will be available on your profile page for others users</p>
                    <div className="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
                        <div className="sm:col-span-4">
                            <label className="block font-bold text-sm leading-6 text-blueEce">
                                Username
                            </label>
                            <div className="mt-2">
                                <div className="flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md">
                                <span className="flex select-none items-center pl-3 text-darkblue sm:text-sm">mystore.com/</span>
                                <input ref={usernameInput} type="text" onChange={handleInputChange} name="username" id="username" autoComplete="username" className="block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6" placeholder={profile?.username}/>
                                </div>
                            </div>
                        </div>
                        <div className="sm:col-span-3">
                            <label htmlFor="country" className="block text-sm font-bold leading-6 text-blueEce">
                                Country
                            </label>
                            <div className="mt-2">
                                <select ref={countryInput} value={formData.country ? formData.country : profile?.country} onChange={handleInputChange} id="country" name="country" autoComplete="country-name" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6" >
                                    <option>Another</option>
                                    <option>France</option>
                                    <option>Germany</option>
                                    <option>Belgium</option>
                                    <option>Italy</option>
                                </select>
                            </div>
                        </div>
                        <div className="col-span-full">
                            <label htmlFor="about" className="block text-sm font-bold leading-6 text-blueEce">
                                About
                            </label>
                            <div className="mt-2">
                                <textarea ref={aboutInput} onChange={handleInputChange} id="about" name="about" rows={3} className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder={(profile?.about === null || profile?.about === '') ? 'Write something about you' : profile?.about} />
                            </div>
                            <p className="mt-3 text-sm leading-6 text-gray-600">Write a few sentences about yourself.</p>
                        </div>
                        <div className="col-span-full">
                            <label htmlFor="photo" className="block text-sm font-bold leading-6 text-blueEce">
                                Photo
                            </label>
                            <div className="mt-2 flex items-center gap-x-3">
                                {chooseImg ?(
                                    <img src={selectedImage} alt="Selected" className="h-12 w-12 object-cover rounded-full" aria-hidden="true"/>
                                ):(
                                    <img src={gravatarUrl} alt="Selected" className="h-12 w-12 object-cover rounded-full" aria-hidden="true"/>
                                )}
                                <button type="button" onClick={handleImageChange} className="rounded-md bg-blueEce px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-darkblue">
                                    Change
                                </button>
                            </div>
                        </div>
                        <div className="col-span-full">
                            <label htmlFor="cover-photo" className="block text-sm font-bold leading-6 text-blueEce">
                                Cover photo
                            </label>
                            <div className="mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10">
                                {selectedImage ? (
                                    <div className="text-center">
                                        <img src={selectedImage} alt="Selected" className="mx-auto h-32 w-32 object-cover rounded-lg"/>
                                        <div className="mx-20 flex text-sm leading-6 text-gray-600">
                                            <label htmlFor="file-upload" className="relative cursor-pointer rounded-md font-semibold text-blueEce focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-darkblue">
                                                <span className="mt-4">Select a new file</span>
                                                <input id="file-upload" name="file-upload" type="file" className="sr-only" accept="image/jpeg, image/png, image/jpg" onChange={handleImageUpload}/>
                                            </label>
                                        </div>
                                        <p className="text-xs leading-5 text-gray-600">PNG, JPG, GIF up to 10MB</p>
                                    </div>
                                ):(
                                <div className="text-center">
                                    <PhotoIcon className="mx-auto h-12 w-12 text-gray-300" aria-hidden="true"/>
                                    <div className="mx-20 flex text-sm leading-6 text-gray-600">
                                        <label htmlFor="file-upload" className="relative cursor-pointer rounded-md font-semibold text-blueEce focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-darkblue">
                                            <span className="mt-4">Upload a file</span>
                                            <input id="file-upload" name="file-upload" type="file" className="sr-only" accept="image/jpeg, image/png, image/jpg" onChange={handleImageUpload}/>
                                        </label>
                                    </div>
                                    <p className="text-xs leading-5 text-gray-600">PNG, JPG, GIF up to 10MB</p>
                                </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
                <div className="border-b border-gray-900/10 pb-12">
                    <h2 className="text-base font-bold leading-7 text-darkblue">Personal Information</h2>
                    <p className="mt-1 text-sm leading-6 text-gray-600">Use a permanent address where you can receive mail.</p>
                    <div className="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
                        <div className="sm:col-span-3">
                            <label htmlFor="first_name" className="block text-sm font-bold leading-6 text-blueEce">
                                First name
                            </label>
                            <div className="mt-2">
                                <input ref={first_nameInput} onChange={handleInputChange} type="text" name="first_name" id="first_name" autoComplete="given-name" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder={profile?.first_name || 'Firstname'}/>
                            </div>
                        </div>
                        <div className="sm:col-span-3">
                            <label htmlFor="last_name" className="block text-sm font-bold leading-6 text-blueEce">
                                Last name
                            </label>
                            <div className="mt-2">
                                <input ref={last_nameInput} onChange={handleInputChange} type="text" name="last_name" id="last_name" autoComplete="family-name" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"placeholder={profile?.last_name || 'Lastname'}/>
                            </div>
                        </div>
                        <div className="sm:col-span-4">
                            <label htmlFor="email" className="block text-sm font-bold leading-6 text-blueEce">
                                Email address
                            </label>
                            <div className="mt-2">
                                <input value={user?.email} onChange={handleInputChange} id="email" name="email" type="email" autoComplete="email" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" disabled/>
                            </div>
                        </div>
                        <div className="sm:col-span-2">
                            <label htmlFor="email" className="block text-sm font-bold leading-6 text-blueEce">
                                Phone
                            </label>
                            <div className="mt-2">
                                <input ref={phoneInput} placeholder={profile?.phone || '06XXXXXXXX'} onChange={handleInputChange} id="phone" name="phone" autoComplete="phone" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
                            </div>
                        </div>
                        <div className="sm:col-span-2 sm:col-start-1">
                            <label htmlFor="city" className="block text-sm font-bold leading-6 text-blueEce">
                                City
                            </label>
                            <div className="mt-2">
                                <input ref={cityInput} onChange={handleInputChange} type="text" name="city" id="city" autoComplete="address-level2" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder={profile?.city || 'City'}/>
                            </div>
                        </div>
                        <div className="sm:col-span-2">
                            <label htmlFor="region" className="block text-sm font-bold leading-6 text-blueEce">
                                State / Department
                            </label>
                            <div className="mt-2">
                                <input ref={stateInput} onChange={handleInputChange} type="text" name="state" id="state" autoComplete="address-level1" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder={profile?.department || 'Department'}/>
                            </div>
                        </div>
                        <div className="sm:col-span-2">
                            <label htmlFor="postal_code" className="block text-sm font-bold leading-6 text-blueEce">
                                ZIP / Postal code
                            </label>
                            <div className="mt-2">
                                <input ref={postal_codeInput} onChange={handleInputChange} type="text" name="postal_code" id="postal_code" autoComplete="postal-code" className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder={profile?.postal_code || 'Postal code'}/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div className="mt-6 flex items-center justify-end gap-x-6">
                <button type="submit" className="rounded-md bg-blueEce px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-darkblue focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-darkblue">Save</button>
            </div>
        </form>
    </Layout>
)}